cmake_minimum_required(VERSION 3.10)
project(campus C)

# üì¶ Output binary path
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

# üß† C standard
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# ‚ö†Ô∏è Compiler warnings
if (CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra)
elseif (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/W4)
endif()

# üì• Manual Libharu setup
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/include/hpdf)
link_directories(${PROJECT_SOURCE_DIR}/lib)

# üìÅ Source files
set(MAIN_SOURCES
    src/main/main.c
    src/main/auth.c
    src/main/signin.c
    src/main/signup.c
    src/main/ui.c
    src/main/fileio.c
    src/main/student.c
    src/main/utils.c
    src/main/database.c
    src/main/security.c
)

# üéØ Main executable
add_executable(${PROJECT_NAME} ${MAIN_SOURCES})
target_compile_definitions(${PROJECT_NAME} PRIVATE _CRT_SECURE_NO_WARNINGS)

# üîó Link static PDF library
target_link_libraries(${PROJECT_NAME} PRIVATE hpdf)

# üì¶ Copy DLL to output folder after build (for runtime)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${PROJECT_SOURCE_DIR}/lib/hpdf.dll"
        "$<TARGET_FILE_DIR:${PROJECT_NAME}>"
)
