name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config
        sudo apt-get install -y libhpdf-dev || echo "libhpdf-dev not available, using fallback"

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Create Required Directories
      run: |
        mkdir -p data credentials logs

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Verify Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "build\${{ matrix.build_type }}\campus.exe") {
          Write-Host "✅ Build successful - campus.exe found in ${{ matrix.build_type }}"
          Get-Item "build\${{ matrix.build_type }}\campus.exe" | Select-Object Name, Length
        } elseif (Test-Path "build\campus.exe") {
          Write-Host "✅ Build successful - campus.exe found in root"
          Get-Item "build\campus.exe" | Select-Object Name, Length
        } else {
          Write-Host "❌ Build failed - campus.exe not found"
          Get-ChildItem build -Recurse -Name "*.exe" -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Verify Build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ -f "build/campus" ]; then
          echo "✅ Build successful - campus binary found"
          ls -la build/campus
        else
          echo "❌ Build failed - campus binary not found"
          find build -name "*campus*" -type f 2>/dev/null || echo "No campus binary found"
          exit 1
        fi

    - name: Upload Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: campus-windows-${{ matrix.build_type }}
        path: |
          build/${{ matrix.build_type }}/campus.exe
          build/campus.exe
          lib/hpdf.dll

    - name: Upload Artifacts (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: campus-ubuntu-${{ matrix.build_type }}
        path: build/campus