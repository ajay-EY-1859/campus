name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  windows-build:
    name: Windows Build
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Directories
      run: |
        mkdir data
        mkdir credentials
        mkdir logs

    - name: Configure CMake
      run: cmake -B build

    - name: Build
      run: cmake --build build --config Release

    - name: Verify Build
      run: |
        echo "Checking build output..."
        dir build\Release
        if (Test-Path "build\Release\campus.exe") {
          Write-Host "✅ Build successful"
          Get-Item "build\Release\campus.exe"
        } else {
          Write-Host "❌ Build failed - EXE not found"
          echo "Build directory contents:"
          Get-ChildItem build -Recurse
          exit 1
        }

    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: campus-windows
        path: |
          build/Release/campus.exe
          lib/hpdf.dll

  ubuntu-build:
    name: Ubuntu Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y libhpdf-dev || echo "Using fallback"

    - name: Create Directories
      run: mkdir -p data credentials logs

    - name: Configure CMake
      run: cmake -B build

    - name: Build
      run: cmake --build build

    - name: Verify Build
      run: |
        if [ -f "build/campus" ]; then
          echo "✅ Build successful"
          ls -la build/campus
        else
          echo "❌ Build failed"
          find build -name "*campus*" 2>/dev/null || echo "No binary found"
          exit 1
        fi

    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: campus-ubuntu
        path: build/campus